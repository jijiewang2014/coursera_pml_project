tree2<-eliminate("Girth", trees)
clearn
clear()
trees2<-eliminate("Girth", trees)
trees2 <- eliminate("Girth", trees)
swirl()
trees2<-eliminate("Girth", trees)
head(trees2)
fit2<-lm(volume~ Height+constant-1, trees)
fit2<-lm(Volume~ Height+constant-1, trees)
fit2 <- lm(Volume ~
| Height + Constant -1, trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lappy(list(fit,fit2),coef)
lapply(list(fit,fit2),coef)
lm(Fertility~. swiss)
all<-lm(Fertility~. swiss)
all<-lm(Fertility ~. swiss)
all<-lm(Fertility ~., swiss)
summary(all)
lm(Fertility ~ agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec<-sum(swiss$Examination+swiss$Catholic)
ec<-swiss$Examination+swiss$Catholic
efit<-lm(Fertility~Agriculture + Catholic + Education + Examination +Infant.Mortality+ec, swiss)
help
all$coeeificents-efit$coefficients
all$coeificents-efit$coefficients
all$coefficents-efit$coefficients
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InspectSprays)
head(InsectSprays)
head(InsectSprays,15)
names(A)
names("A")
sB
summary(InsectSpray[,2])
summary(InsectSprays[,2])
sapply()
sapply(FUN=classes())
?sapply()
sapply(names(insectSprays))
sapply(names(FUN=insectSprays))
sapply(FUN=names(insectSprays))
sapply(FUN=names(insectSpray))
sapply(FUN=names(InsectSpray))
sapply(FUN=class(InsectSpray))
sapply(InsectSprays,FUN=class)
sapply(InsectSprays,class)
fit<-lm(count~spray,InsectSprays)
summary(fit)
summary(fit)$coef
est<-summary(fit)$coef[,1]
sx<-mean(sA)
mean(sA)
mean(sB)
nfit(count~spray-1,InsectSpray)
nfit<-
(count~spray-1,InsectSpray)
(count~spray-1,InsectSprays)
lm(count~spray-1,InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2<-reveal(InsectSray$spray,"C")
spray2<-relevel(InsectSray$spray,"C")
spray2<-relevel(InsectSray$sprays,"C")
spray2<-relevel(InsectSrays$sprays,"C")
spray2<-relevel(InsectSprays$sprays,"C")
spray2<-relevel(InsectSprays$sprays,"C")
infor()
info()
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fits)$coef
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.601
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year, hunger)
summary(fit)$coef
lmF<-lm(Numeric~Year, hunger[hunger$Sex=="Female"])
lmF<-lm(Numeric~Year, x[hunger$Sex=="Female"])
hunger[hunger$sex=='Female']
lmF<-lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunger$Sex=="Female"])
lmM<-lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year[hunger$Sex=="Male"])
lmBoth<-(Numeric~Year+Sex, hunger)
lmBoth<-lm(Numeric~Year+Sex, hunger)
summary(lmBoth)
lmInter<-lm(hunger~Year+Sex+Sex*Year)
lmInter<-lm(hunger~Year+Sex+Sex*Year, hunger)
lmInter<-lm(Numeric~Year+Sex+Sex*Year, hunger)
summary(lmInter)
fit<-lm(y~x, out2)
plot(fit, which=1)
fitno<-lm(y~x, out2[-1,])
plot(fitno,which=1)
coef(fitno)-coef(fit)
coef(fit)-coef(fit(no))
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
view(hatvalues(fit))
head(hatvalues(fit))
sigma<-sqrt(deviance(fit)/123)
sigma<-sqrt(deviance(fit)/df.residual(fit))
rstdM-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1<-deviance(fitno)/df.residual(fitno)
sigma1<-sqrt(deviance(fitno)/df.residual(fitno))
resid(fit[1]/sigma1*sqrt(1-hatvalues(fit)[1])
)
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno, out2)-predict(fit,out2)
sum(dy/2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
dataset(mtcars)
library(dataset)
?library()
head(mtcars)
mydata<-data.frame(mtcars)
View(mydata)
?pair()
?pairs()
?mtcars
q()
mtcars
?mtcars
library(swirl)
swirl()
library(swirl)
swirl()
ravenData
mdl<-glm(ravenWinNum~ravenScore,family="binomial", ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
nex()
nxt()
view(hits)
head(hits)
class(hits[,'date'])
ineger(head(hits[,'date']))
integer(head(hits[,'date']))
integer(head(hits[,'date']))
integer(head(hits[,'date']))
integer(head(hits[,"date"]))
as.integer(head(hits[,"date"]))
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
confint(mdl,'date')
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.vlaues[704]
lambda<-mdl$fitted.values[704]
qpois(.95,lambda)
mdl2
mdl2<-glm(visits~offset)
?
info()
skip()
qpois(0.95,mdl2$fitted.values[704])
library(MASS)
?shuttle
glm<-glm(use~wind, shuttle, binomial)
data<-shuttle
class(shuttle$use)
glm<-glm(use~wind, data= shuttle, family="binomial")
summary(glm)
head(data)
library(MASS)
data<-shuttle
head(shuttle)
glm1<-glm(use~wind, data, family="binomial")
summary(glm1)
summary(glm1)$coef
summary(glm1)$coef[2,1]
x<-summary(glm1)$coef[2,1]
exp(x)
1/exp(x)
1.327*0.969
glm2<-glm(use~wind+magn, data, family="binomial")
x2<-summary(glm12$coef[2,1]
)
x2<-summary(glm2$coef[2,1])
x2<-summary(glm12)$coef[2,1]
x2<-summary(glm2)$coef[2,1]
exp(x2)
summary(glm1)
glm3<-glm(use~(1-wind),data,family="binomial")
summary(glm3)
libary(dplyr)
libary("dplyr")
library("dplyr")
data2<-data%>%mutate(wind=1-wind,use=use)
data2<-data%>%mutate(wind=as.integer(wind),use=use)
data2
data2<-data%>%mutate(wind=wind-1,use=use)
data2<-data2%>%mutate(wind=wind-1,use=use)
glm3<-glm(use~wind),data2,family="binomial")
glm3<-glm(use~wind,data2,family="binomial")
?insectSprays
?InsectSprays
head(InsectSprays)
glm4<-glm(count~spray,InsectSpray,family="Poisson")
glm4<-glm(count~spray,InsectSprays,family="poisson")
summary(glm4)
exp(-0.056)
exp(0.056)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x<-0:5
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lm1<-lm(y~x)
summary(lm1)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y~x)
x2<-1:5
y2<-c(0.93, 2.05, 2.54, 3.87, 4.97)
lm2<-lm(y2~x2)
summary(lm2)
updateR()
updateR(F, T, F, F, F, F, T)
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
check.for.updates.R()
swirl()
library(swirl)
swirl
swirl()
q()
install.packages("shiny")
library(shiny)
q()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.pakcages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
head(training,100)
install.packages("Hmisc ")
?cut2()
hist(training$SuperPlasticizer)
class(training$SuperPlasticizer)
hist(as.numeric(training$SuperPlasticizer))
?hist()
hist(as.numeric(training$SuperPlasticizer),breaks=100)
hist(as.numeric(training$SuperPlasticizer),breaks=100)
dd[with(training, order(-SuperPlasticizer)), ]
training[with(training, order(-SuperPlasticizer)), ]
library(plyr)
arrange(training,desc(SuperPlasticizer))
library(plyr)
arrange(training,desc(Superplasticizer))
head(training,200)
training2<-arrange(training,desc(SuperPlasticizer))
head(training,100)
training2<-arrange(training,desc(Superplasticizer))
head(training2,200)
head(training2,400)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
q()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
preProc<-preProcess(log10(training[,c(IL_13,IL_17E,IL_3,IL_5,IL_6_Receptor,IL_11,IL_16,IL_1alpha,IL_4,IL_6,IL_7)]+1),method="pca",pcaComp=2)
preProc<-preProcess(log10(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")]+1),method="pca",pcaComp=2)
?preProc()
?preProcess()
preProc<-preProcess(log10(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")]+1),method="pca",pcaComp=2, na.remove=true)
preProc<-preProcess(log10(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")]+1),method="pca",pcaComp=2, na.remove=TRUE)
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")],method="pca",pcaComp=2, na.remove=TRUE)
trainIL<-predict(preProc,traning[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")])
trainIL<-predict(preProc,training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")])
trainIL
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")],method="pca", na.remove=TRUE)
trainIL<-predict(preProc,training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")])
trainIL
?preProcess()
preProc
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")],method="pca", thresh=0.8,na.remove=TRUE)
preProc
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")],method="pca", thresh=0.8)
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7")],method="pca", thresh=0.8)
preProc
names(training)
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7","IL_8")],method="pca", thresh=0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
head(adData)
names(adData)
adData<-adData[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16",""IL_1apha","IL_1alpha","IL_4","IL_6","IL_7","IL_8","diagnosis"]
adData<-adData[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7","IL_8","diagnosis"]
adData<-adData[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7","IL_8","diagnosis")]
names(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modFit<-training(diagnosis~.,method="lm",data=training)
modFit<-train(diagnosis~.,method="lm",data=training)
modFit1<-train(diagnosis~.,method="glm",data=training)
install.packages("e1071")
library(e1071)
modFit1<-train(diagnosis~.,method="glm",data=training)
modFit1
pred1<-predict(modFit1,newdata=testing)
pred1
names(pred1)
names("pred1")
?confusionMatrix()
confusionMatrix(pred1,testing$diagnosis)
install.packages("Hmisc")
library(Hmisc)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
head(training,100)
names(training)
training$index
plot(training$CompressiveStrength,training$index)
plot(training$CompressiveStrength,training$index, color="Cement")
plot(training$CompressiveStrength,training$index, col="Cement")
qplot(index,CompressiveStrength, color=Cement,data=training)
qplot(training$index,training$CompressiveStrength, color=Cement)
qplot(training$index,training$CompressiveStrength, color=training$Cement)
qplot(training$index,training$CompressiveStrength, color=Cement,data=training)
qplot(training$index,CompressiveStrength, color=Cement,data=training)
qplot(index,CompressiveStrength, color=Cement,data=training)
qplot(training$index,CompressiveStrength, color=Cement,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
summary(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1)
)
library(qqplot2)
library(ggplot2)
plot(training$CompressiveStrength,training$index, color="Cement")
plot(training$CompressiveStrength,training$index, col="Cement")
?plot()
qplot(training$index,training$CompressiveStrength, color=Cement,data=training)
qplot(training[row,],training$CompressiveStrength, color=Cement,data=training)
qplot(training[row,],CompressiveStrength, color=Cement,data=training)
View(training)
qplot(row.names,CompressiveStrength, color=Cement,data=training)
qplot(row.names,CompressiveStrength, color=Cement,data=age)
qplot(row.names,CompressiveStrength, color=age,data=training)
qplot(row.names,CompressiveStrength, color=Age,data=training)
cut2()
?cut2()
ageCut3<-cut2(training$Age,g=3)
qplot(row.names,CompressiveStrength, color=ageCut3,data=training)
ageCut3
?cbind()
training[,"ageCut3"]<ageCut3
training[,"ageCut3"]<-ageCut3
qplot(row.names,CompressiveStrength, color=ageCut3,data=training)
class(training$ageCut3)
names(ageCut3)
names(training)
qplot(row.names,CompressiveStrength, color=as.numeric(ageCut3),data=training)
as.numeric(training$ageCut3)
training$ageCut3<-as.numeric(training$ageCut3)
head(training)
qplot(row.names,CompressiveStrength, color=ageCut3,data=training)
qplot(row.names,CompressiveStrength, data=training)
plot(row.names,CompressiveStrength, data=training)
plot(row.names,CompressiveStrength, data=training)
corr(training$CompressiveStrength, training$FlyAsh)
cor(training$CompressiveStrength, training$FlyAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training$SuperPlasticizer)
names(training)
headtraining$SuperPlasticizer)
head(training$SuperPlasticizer)
head(training)
summary(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7","IL_8")],method="pca", thresh=0.8)
preProc<-preProcess(training[,c("IL_13","IL_17E","IL_3","IL_5","IL_6_Receptor","IL_11","IL_16","IL_1alpha","IL_4","IL_6","IL_7","IL_8")],method="pca", thresh=0.9)
preProc
setwd("c:/xixi/data_science/practical_ml/project/coding")
source("predict.R")
head(mydata,10)
source("predict.R")
head(mydata,10)
library(diplyr)
library(diplyr)
source("predict.R")
head(mydata,10)
nrow(mydata)
source("predict.R")
nrow(mydata)
View(mydata)
View(mydata)
source("predict.R")
View(mydata)
source("predict.R")
names(mydata)
source("predict.R")
names(mydata)
source("predict.R")
source("predict.R")
source("predict.R")
source("predict.R")
newdata<-select(mydata,-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-new_window,-num_window,-classe)
source("predict.R")
source("predict.R")
source("predict.R")
source("predict.R")
mydata<-select(function(x)!all(is.na(x)), mydata)
mydata<-select(function(x)!all(is.na(x)), mydata)
source("predict.R")
View(mydata)
source("predict.R")
source("predict.R")
?numcolwise()
source("predict.R")
source("predict.R")
source("predict.R")
head(mydata)
head(mydata)
head(mydata)
source("predict.R")
source("predict.R")
